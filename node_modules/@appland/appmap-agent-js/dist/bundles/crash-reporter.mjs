import { request } from 'node:https';
import { readFile } from 'node:fs/promises';
import { URL as URL$1 } from 'node:url';

const toAbsoluteUrl = (relative, base_url) =>
  new URL$1(
    /^[a-zA-Z]:\/[^/]/u.test(relative) ? `/${relative}` : relative,
    base_url,
  ).href;

// Consistent way to retreive home url in prod and test.

const {
  URL,
  JSON: { parse: parseJSON },
} = globalThis;

let url = toAbsoluteUrl(".", import.meta.url);

while (!url.endsWith("appmap-agent-js/")) {
  url = toAbsoluteUrl("..", url);
}

const self_directory = url;

const self_package = parseJSON(
  await readFile(
    new URL(toAbsoluteUrl("package.json", self_directory)),
    "utf8",
  ),
);

self_package.version;

const { Boolean: Boolean$1, Error, Number, undefined: undefined$1 } = globalThis;

const parseExceptionStack = ({ stack }) =>
  [...(stack || "").matchAll(/^\s+at (?:(.+) \((.+)\)|(.+)$)/gmu)]
    .map(([, method, loc1, loc2], level) => {
      const location = loc1 || loc2;
      const [, fileName, line, column] =
        location === "native"
          ? [undefined$1, "native"]
          : location.match(/^(?:\w+:\/\/)?(.+):(\d+):(\d+)$/u) || [];
      if (fileName) {
        return {
          fileName,
          level,
          method: method || "",
          line: Number(line || 0),
          column: Number(column || 0),
        };
      }
      return undefined$1;
    })
    .filter(Boolean$1);

const {
  Boolean,
  Buffer,
  Date,
  JSON: { stringify: stringifyJSON },
  process: {
    env: { APPMAP_TELEMETRY_DISABLED },
  },
  Promise: Promise$1,
} = globalThis;

// This key is meant to be publically shared. However, I'm adding a simple
// obfuscation to mitigate key scraping bots on GitHub. The key is split on
// hypens and base64 encoded without padding.
// key.split('-').map((x) => x.toString('base64').replace(/=*/, ''))
const INSTRUMENTATION_KEY = [
  "NTBjMWE1YzI",
  "NDliNA",
  "NDkxMw",
  "YjdjYw",
  "ODZhNzhkNDA3NDVm",
]
  .map((x) => Buffer.from(x, "base64").toString("utf8"))
  .join("-");

const INGESTION_ENDPOINT = "centralus-2.in.applicationinsights.azure.com";

/* c8 ignore start */
const reportException = (exception) => {
  if (APPMAP_TELEMETRY_DISABLED) {
    return null;
  }

  const data = {
    name: "Microsoft.ApplicationInsights.Exception",
    time: new Date().toISOString(),
    iKey: INSTRUMENTATION_KEY,
    tags: {
      "ai.cloud.roleInstance": "@appland/appmap-agent-js",
    },
    data: {
      baseType: "ExceptionData",
      baseData: {
        ver: 2,
        handledAt: "UserCode",
        exceptions: [
          {
            id: 1,
            typeName: exception.name,
            message: exception.message,
            hasFullStack: Boolean(exception.stack),
            parsedStack: parseExceptionStack(exception),
          },
        ],
      },
    },
  };

  const options = {
    hostname: INGESTION_ENDPOINT,
    path: "/v2/track",
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
  };

  return new Promise$1((resolve) => {
    const req = request(options, resolve);

    // Don't throw if the request fails - we don't want to crash the app
    req.on("error", resolve);

    req.write(stringifyJSON(data));
    req.end();
  });
};
/* c8 ignore stop */

export { reportException };
